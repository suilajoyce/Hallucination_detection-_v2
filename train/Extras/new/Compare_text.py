# def generate_soft_labels(model_output_text, ref):
#   """Generates soft labels for words in the model output text.

#   Args:
#     model_output_text: The text generated by the model.
#     ref: The reference text.

#   Returns:
#     A list of dictionaries, each representing a word in the model output text with
#     its start index, probability, and end index.
#   """

#   soft_labels = []
#   start_idx = 0

#   for word in model_output_text.split():
#     end_idx = start_idx + len(word) - 1
#     prob = 0 if word in ref.split() else 1
#     soft_labels.append({'start': start_idx, 'prob': prob, 'end': end_idx})
#     start_idx = end_idx + 1

#   return soft_labels

# # Example usage:
# model_output = "The Elysiphale order contains 5 genera"
# reference = "The order contains one family (Erysiphaceae), 28 genera and around 1000 species."

# soft_labels = generate_soft_labels(model_output, reference)
# print(soft_labels)



import json

def generate_soft_labels(model_output_text, ref):
    """
    Génère des soft labels pour chaque mot dans le texte généré par le modèle.

    Args:
        model_output_text (str): Texte généré par le modèle.
        ref (str): Texte de référence.

    Returns:
        List[dict]: Liste des soft labels avec start, end et prob pour chaque mot.
    """
    soft_labels = []
    start_idx = 0

    for word in model_output_text.split():
        end_idx = start_idx + len(word) - 1
        prob = 0 if word in ref.split() else 1  # Proba = 0 si le mot est dans ref, sinon 1
        soft_labels.append({'start': start_idx, 'prob': prob, 'end': end_idx})
        start_idx = end_idx + 2  # Compte l'espace suivant

    return soft_labels


def process_json_and_update_jsonl(input_json_file, output_jsonl_file):
    """
    Lit un fichier JSON d'entrée, génère les soft labels pour chaque item,
    et met à jour un fichier JSONL de sortie en remplaçant les soft labels 
    et en supprimant les hard labels.

    Args:
        input_json_file (str): Chemin vers le fichier JSON d'entrée.
        output_jsonl_file (str): Chemin vers le fichier JSONL de sortie à mettre à jour.
    """
    # Charger le fichier JSON d'entrée
    with open(input_json_file, 'r', encoding='utf-8') as infile:
        input_data = json.load(infile)  # Un fichier JSON contient un seul objet

    # Lire le fichier JSONL ligne par ligne
    output_data = []
    with open(output_jsonl_file, 'r', encoding='utf-8') as infile:
        for line in infile:
            output_data.append(json.loads(line))  # Charger chaque ligne comme un objet JSON

    updated_data = []
    # Générer les soft labels pour chaque élément d'input_data
    for i, item in enumerate(input_data):
        model_output_text = item.get("model_output_text", "")
        reference_text = item.get("ref", "")

        # Calculer les soft labels
        soft_labels = generate_soft_labels(model_output_text, reference_text)

        # Mettre à jour les données du fichier JSONL
        if i < len(output_data):  # Pour éviter les dépassements d'index
            updated_item = {
                "id": output_data[i].get("id", ""),
                "lang": output_data[i].get("lang", ""),
                "model_input": output_data[i].get("model_input", ""),
                "model_output_text": model_output_text,
                "model_id": output_data[i].get("model_id", ""),
                "soft_labels": soft_labels,
                "model_output_logits": output_data[i].get("model_output_logits", []),
                "model_output_tokens": output_data[i].get("model_output_tokens", [])
            }
            updated_data.append(updated_item)

    # Écrire les données mises à jour dans un fichier JSONL
    with open(output_jsonl_file, 'w', encoding='utf-8') as outfile:
        for updated_item in updated_data:
            outfile.write(json.dumps(updated_item) + '\n')

    print(f"Le fichier JSONL a été mis à jour et sauvegardé dans : {output_jsonl_file}")


# Exemple d'utilisation
if __name__ == "__main__":
    input_json_file = "/home/chinjoyce/Downloads/Mushroom/val/reference_response.json"       # Fichier d'entrée JSON
    output_jsonl_file = "/home/chinjoyce/Downloads/Mushroom/val/mushroom.en-val.v2.jsonl"
    process_json_and_update_jsonl(input_json_file, output_jsonl_file)
